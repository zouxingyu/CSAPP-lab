#######################################################################
# Test for copying block of size 4;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $4, %rdx		# src and dst have 4 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	halt			# should halt with num nonzeros in %rax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	xorq %rax,%rax		# count = 0;
	iaddq $-4,%rdx
	jl Rest		
Loop:		
	mrmovq (%rdi), %r10	# read val from src...
	mrmovq 8(%rdi), %r11
	mrmovq 16(%rdi), %r12
	mrmovq 24(%rdi), %r13
	rmmovq %r10, (%rsi)	
	rmmovq %r11, 8(%rsi)
	rmmovq %r12, 16(%rsi)
	rmmovq %r13, 24(%rsi)
	andq %r10, %r10
	jle Test2		
	iaddq $1,%rax
Test2:
	andq %r11, %r11
	jle Test3
	iaddq $1,%rax
Test3:
	andq %r12,%r12
	jle Test4
	iaddq $1,%rax
Test4:
	andq %r13,%r13
	jle NNpos
	iaddq $1,%rax
NNpos:
	iaddq $32,%rsi
	iaddq $32,%rdi
	iaddq $-4,%rdx	
	jge Loop			# if so, goto Loop:
Rest:
	iaddq $3,%rdx
	jl Done
	mrmovq (%rdi), %r10	
	mrmovq 8(%rdi), %r11
	rmmovq %r10, (%rsi)
	andq %r10, %r10	
	jle RTest1			
	iaddq $1,%rax
RTest1:	
	iaddq $-1,%rdx
	jl Done
	rmmovq %r11, 8(%rsi)
	mrmovq 16(%rdi), %r10
	andq %r11, %r11	
	jle RTest2			
	iaddq $1,%rax
RTest2:
	iaddq $-1,%rdx
	jl Done
	rmmovq %r10, 16(%rsi)
	andq %r10, %r10	
	jle Done			
	iaddq $1,%rax	
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad -1
	.quad 2
	.quad -3
	.quad 4
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
